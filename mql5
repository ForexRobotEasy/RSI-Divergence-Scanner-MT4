
// Developer: Forex Robot Easy Team
// Developer's site: forexroboteasy.com
// Program name: RSI Divergence Scanner MT4

#property strict

// Global variables
string[] symbols = {'EURUSD', 'GBPUSD', 'USDJPY'}; // List of symbols to scan
int[] timeframes = {PERIOD_M15, PERIOD_H1, PERIOD_D1}; // List of timeframes to scan
int divergenceThreshold = 5; // Minimum RSI divergence value to consider

// Logging variables
bool enableLogging = true; // Enable or disable logging
string logFileName = 'RSI_Divergence_Scanner_Log.txt'; // Log file name

//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
int OnInit()
{
    // Initialize logging
    if (enableLogging)
    {
        if (!OpenLogFile())
        {
            Print('Failed to open log file!');
            return INIT_FAILED;
        }
    }
    
    // Set up the scanner
    for (int i = 0; i < ArraySize(symbols); i++)
    {
        for (int j = 0; j < ArraySize(timeframes); j++)
        {
            string symbol = symbols[i];
            int timeframe = timeframes[j];
            
            // Attach RSI indicator to the chart
            string indicatorName = 'RSI_' + symbol + '_' + timeframe;
            int indicatorHandle = iRSI(symbol, timeframe, 14, PRICE_CLOSE);
            
            // Check for indicator initialization errors
            if (indicatorHandle == INVALID_HANDLE)
            {
                Log('Failed to attach RSI indicator for ' + symbol + ' on ' + TimeframeToString(timeframe));
                continue;
            }
            
            // Scan for divergences
            ScanDivergences(symbol, timeframe, indicatorHandle);
        }
    }
    
    // Close log file
    if (enableLogging)
        CloseLogFile();
    
    return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Custom indicator deinitialization function                       |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Close log file
    if (enableLogging)
        CloseLogFile();
}

//+------------------------------------------------------------------+
//| Scan for divergences                                             |
//+------------------------------------------------------------------+
void ScanDivergences(const string symbol, const int timeframe, const int indicatorHandle)
{
    // Perform divergence calculation
    double[] values = new double[Bars];
    ArraySetAsSeries(values, true);
    int calculatedBars = iBarShift(symbol, timeframe, Time[0]);
    int startBar = MathMax(calculatedBars, iBars(symbol, timeframe));
    int endBar = Bars - 1;
    
    for (int i = startBar; i >= endBar; i--)
    {
        double currentPrice = iClose(symbol, timeframe, i);
        double currentRSI = iRSI(symbol, timeframe, 14, PRICE_CLOSE, i);
        
        double previousPrice = iClose(symbol, timeframe, i + 1);
        double previousRSI = iRSI(symbol, timeframe, 14, PRICE_CLOSE, i + 1);
        
        double divergence = currentPrice - previousPrice - (currentRSI - previousRSI);
        
        // Check for regular divergence
        if (divergence > divergenceThreshold)
        {
            Log('Regular divergence detected for ' + symbol + ' on ' + TimeframeToString(timeframe) + ' at bar ' + i);
            // Place trading logic for regular divergence here
        }
        
        // Check for hidden divergence
        if (divergence < -divergenceThreshold)
        {
            Log('Hidden divergence detected for ' + symbol + ' on ' + TimeframeToString(timeframe) + ' at bar ' + i);
            // Place trading logic for hidden divergence here
        }
    }
}

//+------------------------------------------------------------------+
//| Open log file                                                     |
//+------------------------------------------------------------------+
bool OpenLogFile()
{
    int fileHandle = FileOpen(logFileName, FILE_WRITE|FILE_TXT);
    
    if (fileHandle == INVALID_HANDLE)
        return false;
    
    FileClose(fileHandle);
    return true;
}

//+------------------------------------------------------------------+
//| Close log file                                                    |
//+------------------------------------------------------------------+
void CloseLogFile()
{
    int fileHandle = FileOpen(logFileName, FILE_APPEND|FILE_TXT);
    
    if (fileHandle != INVALID_HANDLE)
        FileClose(fileHandle);
}

//+------------------------------------------------------------------+
//| Log message                                                       |
//+------------------------------------------------------------------+
void Log(const string message)
{
    if (enableLogging)
    {
        int fileHandle = FileOpen(logFileName, FILE_APPEND|FILE_TXT);
        
        if (fileHandle != INVALID_HANDLE)
        {
            FileWriteString(fileHandle, TimeToString(TimeLocal()) + ' - ' + message + '\n');
            FileClose(fileHandle);
        }
    }
}

//+------------------------------------------------------------------+
//| Convert timeframe to string                                       |
//+------------------------------------------------------------------+
string TimeframeToString(const int timeframe)
{
    string timeframeString;
    
    switch (timeframe)
    {
        case PERIOD_M1: timeframeString = 'M1'; break;
        case PERIOD_M5: timeframeString = 'M5'; break;
        case PERIOD_M15: timeframeString = 'M15'; break;
        case PERIOD_M30: timeframeString = 'M30'; break;
        case PERIOD_H1: timeframeString = 'H1'; break;
        case PERIOD_H4: timeframeString = 'H4'; break;
        case PERIOD_D1: timeframeString = 'D1'; break;
        case PERIOD_W1: timeframeString = 'W1'; break;
        case PERIOD_MN1: timeframeString = 'MN1'; break;
        default: timeframeString = ''; break;
    }
    
    return timeframeString;
}
